name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (apk or aab)'
        required: true
        default: 'apk'
        type: choice
        options:
        - apk
        - aab

jobs:
  build:
    name: Build Android App
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: 🏗 Setup repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏗 Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: npm

    - name: 🏗 Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: 🏗 Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: 🏗 Setup Expo and EAS
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}

    - name: 📦 Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        npx expo install --fix

    - name: 🧹 Clean cache
      run: |
        npm cache clean --force
        npx expo r -c

    - name: 🔧 Generate app config
      run: npx expo export:embed

    - name: 🏗 Setup Gradle cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 🔧 Setup build environment
      run: |
        echo "EXPO_NO_TELEMETRY=1" >> $GITHUB_ENV
        echo "EXPO_NO_GIT_STATUS=1" >> $GITHUB_ENV
        echo "EAS_NO_VCS=1" >> $GITHUB_ENV

    - name: 🚀 Build APK
      if: github.event.inputs.build_type == 'apk' || github.event.inputs.build_type == ''
      run: |
        npx eas build --platform android --profile preview --local --output ./build-output/app.apk
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

    - name: 🚀 Build AAB
      if: github.event.inputs.build_type == 'aab'
      run: |
        npx eas build --platform android --profile production --local --output ./build-output/app.aab
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

    - name: 📦 Upload APK artifact
      if: github.event.inputs.build_type == 'apk' || github.event.inputs.build_type == ''
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-${{ github.sha }}
        path: ./build-output/app.apk
        retention-days: 30

    - name: 📦 Upload AAB artifact
      if: github.event.inputs.build_type == 'aab'
      uses: actions/upload-artifact@v4
      with:
        name: android-aab-${{ github.sha }}
        path: ./build-output/app.aab
        retention-days: 30

    - name: 📊 Build summary
      run: |
        echo "## 🎉 Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type:** ${{ github.event.inputs.build_type || 'apk' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📱 **Download the built app from the Artifacts section above.**" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
    - name: 📱 Build Success Notification
      if: needs.build.result == 'success'
      run: |
        echo "✅ Android build completed successfully!"
        echo "📱 APK/AAB is ready for download from artifacts."

    - name: ❌ Build Failure Notification
      if: needs.build.result == 'failure'
      run: |
        echo "❌ Android build failed!"
        echo "Please check the logs for details."
